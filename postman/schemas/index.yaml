openapi: 3.0.0
info:
  title: Post-It
  version: 1.0.0
  description: Simple Social Media API
servers:
  - url: https://post-it-2904.onrender.com
    description: Web Service
security:
  - bearerAuth: []
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - username
        - email
        - password
    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/User'
        content:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - user
        - content
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/User'
        post:
          $ref: '#/components/schemas/Post'
        content:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - user
        - post
        - content
paths:
  /users/signup:
    post:
      summary: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignUpRequest'
      responses:
        '201':
          description: The created user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSignUpResponse'
  /users/login:
    post:
      summary: Log in to an existing user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        '200':
          description: Logged in successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        '401':
          description: Unauthorized access.
  /users:
    get:
      summary: Get all users
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      summary: Get a user by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to get.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The user with the specified ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'            
    patch:
      summary: Update a user by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to update.
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The updated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Delete a user by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to delete.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The updated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /posts:
    get:
      summary: Get all posts
      responses:
        '200':
          description: A list of posts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      summary: Create a new post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: The created post.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  /posts/{id}:
    get:
      summary: Get a post by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to get.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The post with the specified ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    put:
      summary: Delete a post by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to delete.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The post with the specified ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  /posts/user/{id}:
    get:
      summary: Get a post by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to get.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The post with the specified ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  /posts/edit/{id}:
    put:
      summary: Update a post by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post to update.
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: The updated post.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
   
  /posts/{id}/comment/:
    get:
      summary: Get all comments under a postit.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post where the comments are
          schema: 
            type: integer
            format: int64
      responses:
        '200':
          description: A list of comments.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      summary: Create a new comment
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post where the comments are
          schema: 
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: The created comment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
  /posts/comment/{id}:
    put:
      summary: Delete a comment by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the comment to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: The comment was deleted

